import numpy as np
import cv2
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from utils import *
from datafield import *
import classifier as clf
import extraction
import detect
from moviepy.editor import VideoFileClip
import time
import warp
def pipeline(img):
    draw_img =np.copy(img)
    hotwindows = detect.search_windows(draw_img,df.windowsList,df.svc, df.XScaler,
                        color_space=df.color_space,
                        spatial_size=df.spatial_size, hist_bins=df.hist_bins,
                        hist_range=df.hist_range, orient=df.orient,
                        pix_per_cell=df.pix_per_cell, cell_per_block=df.cell_per_block,
                        hog_channel=df.hog_channel, spatial_feat=df.spatial_feat,
                        hist_feat=df.hist_feat, hog_feat=df.hog_feat)



    heatImage,resultImage =detect.heatmapVedio(img,hotwindows,4)
    #heatImage,resultImage =detect.heatmapImage(img,hotwindows,0)
    #rawboxes_img = draw_boxes(img,df.windowsList)
    #result_img = draw_boxes(img,hotwindows)
    #df.cnt = df.cnt+1
    #result = cv2.addWeighted(draw_img, 1, heatImage3, 0.3, 0)
    return resultImage

# 1. decide what features to use
# 2. train the classifier
clf.init()
# 3. Create Slide Window List
wp = WarpPerspective()
sw = SlidingWindows(wp)
df.windowsList = sw.windows



# plt.subplots(6, 3, figsize=(16, 28))
# j = 6
# for i in range(6):
#     img = plt.imread('test_images/test{}.jpg'.format(i+1), format='RGB')
#     heatmap,result = pipeline(img)
#     plt.subplot(6,3,i*3+1)
#     plt.imshow(heatmap, 'hot')
#     if i == 0: plt.title('Heatmap')
#     plt.subplot(6,3,i*3+2)
#     plt.imshow(result)
#     if i == 0: plt.title('Result')
#     plt.subplot(6,3,i*3+3)
#     plt.imshow(img)
#     if i == 0: plt.title('Raw')
# plt.savefig('output_images/test_images_result.png')
# plt.show()

# image = mpimg.imread('test_images/test1.jpg')
# resImage = pipeline(image)
# #twoImagePlot(image,resImage)
# plt.imshow(resImage)
# plt.show()
# #
video_output = 'test_video_res.mp4' # name of the video file generated by the vehicle detector
clip1 = VideoFileClip("test_video.mp4") #original video file
white_clip = clip1.fl_image(pipeline) #NOTE: this function expects color images!!
white_clip.write_videofile(video_output, audio=False)
print (df.cnt)

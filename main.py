import numpy as np
import cv2
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from utils import *
from datafield import *
import classifier as clf
import extraction
import detect
from moviepy.editor import VideoFileClip
def pipeline(img):


    # 3. slide_window to find the cars
    # 3.1 half of
    #print(img.shape)

    for idx, scale in enumerate(df.sliding_window['scale']):
        ystart = df.sliding_window['ystart'][idx]
        ystop = df.sliding_window['ystop'][idx]
        draw_img=detect.find_cars(img, ystart, ystop, scale,df.svc, df.XScaler, df.orient,
                    df.pix_per_cell,df.cell_per_block, df.spatial_size, df.hist_bins,
                    df.spatial_feat,df.hist_feat,df.hog_feat)
    return draw_img

# 1. decide what features to use
# 2. train the classifier
clf.dataInit()

'''image = mpimg.imread('test_images/test6.jpg')
resImage = pipeline(image)
#twoImagePlot(image,resImage)
plt.imshow(resImage)
plt.show()'''

video_output = 'test_video_res.mp4' # name of the video file generated by the vehicle detector
clip1 = VideoFileClip("test_video.mp4") #original video file
white_clip = clip1.fl_image(pipeline) #NOTE: this function expects color images!!
white_clip.write_videofile(video_output, audio=False)

'''rand_car = np.random.choice(len(cars))
rand_notcar = np.random.choice(len(notcars))
this_car = mpimg.imread(cars[rand_car])
this_notcar = mpimg.imread(notcars[rand_notcar])
print(rand_car,rand_notcar)
rand_car = 1000
rand_notcar = 2000
features = extraction.extract_features([cars[rand_car]],color_space, spatial_size,
                        hist_bins, orient,
                        pix_per_cell, cell_per_block, hog_channel,
                        spatial_feat, hist_feat, hog_feat,plot = True)'''
